# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.3.0
  slack: circleci/slack@3.4.2
  gke: circleci/gcp-gke@1.0.4
  kubernetes: circleci/kubernetes@0.11.0
  helm: circleci/helm@1.0.0

parameters:
  det-version:
    type: string
    default: 0.12.13.dev0

commands:
  install-wheel:
    parameters:
      package-name:
        type: string
      package-location:
        type: string
    steps:
      - run:
          name: Install <<parameters.package-name>>
          working_directory: <<parameters.package-location>>
          command: |
            make build
            pip install --find-links dist <<parameters.package-name>>==<< pipeline.parameters.det-version >>
            pip install --no-deps --force-reinstall --find-links dist <<parameters.package-name>>==<< pipeline.parameters.det-version >>
  setup-python-venv:
    description: Set up and create Python venv.
    parameters:
      determined-common:
        type: boolean
        default: false
      determined-deploy:
        type: boolean
        default: false
      extras-requires:
        type: string
        default: ""
      executor:
        type: string
    steps:
      - run:
          name: Setup venv
          command: |
            python3.6 -m venv /tmp/venv
            echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
            /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools

      - run:
          name: Write cache key
          command: |
            echo <<parameters.executor>> > /tmp/cachefile
            if [ "<<parameters.determined-common>>" = "true" ]; then
              cat common/setup.py >> /tmp/cachefile
            fi
            if [ "<<parameters.determined-deploy>>" = "true" ]; then
              cat deploy/setup.py >> /tmp/cachefile
            fi
            echo <<parameters.extras-requires>> >> /tmp/cachefile

      - restore_cache:
          keys:
            - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - install-wheel:
                package-name: determined-common
                package-location: ~/project/common
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - install-wheel:
                package-name: determined-deploy
                package-location: ~/project/deploy
      - run:
          name: Install <<parameters.extras-requires>>
          command: |
            if [ -n "<<parameters.extras-requires>>" ]; then
              pip install <<parameters.extras-requires>>
            fi
      - save_cache:
          key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
          paths:
            - "/tmp/venv"

jobs:
  build-docs:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          extras-requires: "tensorflow==1.14 torch==1.4"
          extra-requirements-file: "docs/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C examples build
      - run: make -C docs build
      - persist_to_workspace:
          root: .
          paths:
            - examples/build
            - cli/dist
            - common/dist
            - harness/dist
            - docs/site/html
      - store_artifacts:
          path: docs/site/html

  publish-docs:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: apk add make curl python3 py3-pip
      - run: pip3 install awscli
      - run: make -C docs/deploy publish

  package-and-push-system-local:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go-get-deps
      - setup_remote_docker
      - run: make -C proto build
      - run: make package
      - run: mkdir -p build/
      - run: docker save -o build/master.image determinedai/determined-master:${CIRCLE_SHA1}
      - run: docker save -o build/agent.image determinedai/determined-agent:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: .
          paths:
            - "master/dist/*linux_amd64.deb"
            - "master/dist/*linux_amd64.rpm"
            - "agent/dist/*linux_amd64.deb"
            - "agent/dist/*linux_amd64.rpm"
            - "build/*.image"

  package-and-push-system-dev:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go-get-deps
      - setup_remote_docker
      - run: make -C proto build
      - run: make package
      - login-docker
      - run: make -C master publish-dev
      - run: make -C agent publish-dev

  package-and-push-system-rc:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go-get-deps
      - setup_remote_docker
      - run: make -C proto build
      - run: make package
      - login-docker
      - run: make -C master publish
      - run: make -C agent publish

  package-and-push-system-release:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go-get-deps
      - setup_remote_docker
      - login-docker
      - run: make -C proto build
      - run: make -C master release
      - run: make -C agent release

  publish-python-package:
    parameters:
      path:
        type: string
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          extras-requires: "twine"
          executor: determinedai/cimg-base:stable
      - run: make -C <<parameters.path>> build
      - run: make -C <<parameters.path>> publish

  build-and-package-ts-sdk:
    docker:
      - image: cimg/openjdk:14.0.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: make -C webui/api-ts-sdk get-deps-swagger
      - run: make -C webui/api-ts-sdk build-swagger
      - persist_to_workspace:
          root: .
          paths:
            - webui/api-ts-sdk/src

  upload-try-now-template:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          extras-requires: "awscli"
          executor: determinedai/cimg-base:stable
      - run: make -C deploy upload-try-now-template

  test-debian-packaging:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: sudo apt-get install -y $(pwd)/master/dist/determined-master*.deb
      - run: sudo apt-get install -y $(pwd)/agent/dist/determined-agent*.deb
      - run: sudo cp .circleci/packaging/master.yaml /etc/determined/master.yaml
      - run: sudo cp .circleci/packaging/agent.yaml /etc/determined/agent.yaml
      - run: make -C tools start-db
      - run: python3 .circleci/scripts/wait_for_server.py localhost 5432
      - run: sudo systemctl restart determined-master
      - run: python3 .circleci/scripts/wait_for_server.py localhost 8080
      - run: sudo systemctl restart determined-agent
      - run: ./.circleci/scripts/sanity.sh

  test-e2e-webui:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker load --input build/master.image
      - run: docker load --input build/agent.image

      - install-webui-test-deps
      - run: pyenv global 3.6.10
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          extra-requirements-file: "webui/tests/requirements.txt"
          executor: ubuntu-1604:202004-01
      - setup-local-cluster:
          det-version: ${CIRCLE_SHA1}
      - run-e2e-webui-tests
      - store_test_results:
          path: webui/tests/results/
      - store_artifacts:
          path: webui/tests/results/recordings

  lint-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm check

  build-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm build
      - persist_to_workspace:
          root: .
          paths:
            - webui/elm/public

  test-unit-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm test

  lint-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react check

  build-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react build
      - persist_to_workspace:
          root: .
          paths:
            - webui/react/build

  test-unit-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react test

  build-storybook:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react build-storybook
      - store_artifacts:
          path: webui/react/build-storybook

  lint-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C proto build
      - run: make -C proto check
      - run: make -C master check
      - run: make -C agent check

  build-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C proto build
      - run: make -C master build
      - run: make -C agent build
      - persist_to_workspace:
          root: .
          paths:
            - "master/build"
            - "agent/build"

  build-proto:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C proto build
      - persist_to_workspace:
          root: .
          paths:
            - "proto/build/**/*"

  test-unit-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C proto build
      - run: make -C master test
      - run: make -C agent test

  lint-python:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extras-requires: "torch==1.4.0"
          extra-requirements-file: "requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C cli check
      - run: make -C common check
      - run: make -C harness check
      - run: make -C deploy check
      - run: make -C e2e_tests check
      - run: make -C examples check

  test-unit-harness:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0"
          extra-requirements-file: "harness/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C harness test

  test-unit-harness-tf2:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==2.2.0"
          extra-requirements-file: "harness/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C harness test-tf2

  test-examples:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          determined-cli: true
          extra-requirements-file: "examples/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C examples test

  test-cli:
    parameters:
      executor-name:
        type: string
    executor: << parameters.executor-name >>
    steps:
      - checkout
      - run: pip install wheel
      - run: cd common; python setup.py bdist_wheel -d ../build
      - run: cd cli; python setup.py bdist_wheel -d ../build
      - run: pip install --find-links build determined-cli==<< pipeline.parameters.det-version >>
      # Ensure Determined cli can run without installing cli test requirements
      - run: det --help
      - run: pip install setuptools_scm
      - run: pip install -r cli/tests/requirements.txt
      - run: pytest cli/tests

  test-e2e:
    parameters:
      tf1:
        type: boolean
        default: false
      tf2:
        type: boolean
        default: false
      mark:
        type: string
      parallelism:
        type: integer
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - attach_workspace:
          at: .

      - run: pyenv global 3.6.10
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: ubuntu-1604:202004-01

      - run:
          name: Start database
          command: make -C tools start-db
      - run:
          name: Start cluster
          command: make -C tools run
          background: true

      - pull-task-images:
          tf1: <<parameters.tf1>>
          tf2: <<parameters.tf2>>

      - run-e2e-tests:
          mark: <<parameters.mark>>
          master-host: localhost

      - store_test_results:
          path: /tmp/test-results/

  deploy:
    parameters:
      agent-instance-type:
        type: string
        default: "p2.xlarge"
      max-dynamic-agents:
        type: integer
        default: 1
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-deploy: true
          executor: determinedai/cimg-base:stable
      - deploy-aws-cluster:
          cluster-id: determined-${CIRCLE_BRANCH}
          det-version: ${CIRCLE_SHA1}
          agent-instance-type: <<parameters.agent-instance-type>>
          max-dynamic-agents: <<parameters.max-dynamic-agents>>
      - slack/status:
          fail_only: true
          failure_message: ':thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`'
          mentions: "${SLACK_USER_ID}"

  test-e2e-aws:
    parameters:
      cluster-id-prefix:
        type: string
      mark:
        type: string
      agent-instance-type:
        type: string
        default: p2.xlarge
      max-dynamic-agents:
        type: integer
        default: 1
      parallelism:
        type: integer
        default: 1
      slack-mentions:
        type: string
        default: ""
      slack-channel:
        type: string
        default: ""
    docker:
      - image: determinedai/cimg-base:stable
    parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - setup-aws-cluster:
          cluster-id: <<parameters.cluster-id-prefix>>-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}
          det-version: ${CIRCLE_SHA1}
          agent-instance-type: <<parameters.agent-instance-type>>d
          max-dynamic-agents: <<parameters.max-dynamic-agents>>
      - run-e2e-tests:
          mark: <<parameters.mark>>
          master-host: ${MASTER_HOST}
      - upload-cloud-watch-to-s3:
          cluster-id: ${CLUSTER_ID}
      - terminate-aws-cluster:
          cluster-id: ${CLUSTER_ID}
      - store_test_results:
          path: /tmp/test-results/
      - slack/status:
          fail_only: True
          failure_message: ':thisisfine: A \`<<parameters.mark>>\` E2E GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`'
          mentions: <<parameters.slack-mentions>>
          channel: <<parameters.slack-channel>>

  test-e2e-gke:
    parameters:
      cluster-id-prefix:
        type: string
      mark:
        type: string
      parallelism:
        type: integer
        default: 1
      gke-version:
        type: string
        default: "1.16.13-gke.1"
      machine-type:
        type: string
        default: "n1-standard-8"
      num-machines:
        type: integer
        default: 1
      gpu-type:
        type: string
        default: "nvidia-tesla-k80"
      gpus-per-machine:
        type: integer
        default: 1
      region:
        type: string
        default: "us-west1"
      node-locations:
        type: string
        default: "us-west1-b"
      slack-mentions:
        type: string
        default: ""
      slack-channel:
        type: string
        default: ""
    docker:
      - image: determinedai/cimg-base:stable
    parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - setup-gke-cluster:
          cluster-id: <<parameters.cluster-id-prefix>>-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}
          det-version: ${CIRCLE_SHA1}
          gke-version: <<parameters.gke-version>>
          machine-type: <<parameters.machine-type>>
          num-machines: <<parameters.num-machines>>
          gpu-type: <<parameters.gpu-type>>
          gpus-per-machine: <<parameters.gpus-per-machine>>
          region: <<parameters.region>>
          node-locations: <<parameters.node-locations>>
      - set-google-application-credentials
      - run-e2e-tests:
          mark: <<parameters.mark>>
          master-host: ${MASTER_HOST}
      - terminate-gke-cluster:
          cluster-id: ${CLUSTER_ID}
          region: <<parameters.region>>
      - slack/status:
          fail_only: True
          failure_message: ':thisisfine: A \`<<parameters.mark>>\` E2E GKE GPU job on branch \`${CIRCLE_BRANCH}\` has failed! Author Email: \`${AUTHOR_EMAIL}\`'
          mentions: <<parameters.slack-mentions>>
          channel: <<parameters.slack-channel>>

  cleanup-stacks:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-deploy: true
          executor: determinedai/cimg-base:stable
      - run: python .circleci/scripts/remove_stacks.py

#  install-slack:
#    docker:
#      - image: determinedai/cimg-base:stable
#    steps:
#      - checkout
#      - run: pip install slackclient

workflows:
  cleanup:
#    triggers:
#      - schedule:
#          cron: "0 11,17,23 * * *"
#          filters:
#            branches:
#              only:
#                - master
    jobs:
      - cleanup-stacks:
          context: aws
